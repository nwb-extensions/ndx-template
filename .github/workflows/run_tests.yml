name: Run tests
on:
  schedule:
    - cron: '0 5 * * *'  # once per day at midnight ET
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  run-tests:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        include:
        - { name: linux-python3.8   , os: ubuntu-latest , python-ver: "3.8"  }
        - { name: linux-python3.12  , os: ubuntu-latest , python-ver: "3.12" }
        - { name: windows-python3.8 , os: windows-latest, python-ver: "3.8"  }
        - { name: windows-python3.9 , os: windows-latest, python-ver: "3.9"  }
        - { name: windows-python3.10, os: windows-latest, python-ver: "3.10" }
        - { name: windows-python3.11, os: windows-latest, python-ver: "3.11" }
        - { name: windows-python3.12, os: windows-latest, python-ver: "3.12" }
        - { name: macos-python3.8   , os: macos-latest  , python-ver: "3.8"  }
        - { name: macos-python3.12  , os: macos-latest  , python-ver: "3.12" }
    steps:
    - name: Cancel non-latest runs
      uses: styfle/cancel-workflow-action@0.12.0
      with:
        all_but_latest: true
        access_token: ${{ github.token }}

    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-ver }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install cookiecutter pynwb hdmf-docutils
        python -m pip list

    - name: Configure git
      run: |
        git config --global user.email "you@example.com"
        git config --global user.name "Your Name"

    - name: Evaluate template from local source
      run: |
        cookiecutter -v --no-input --output-dir ./out .
        # cookiecutter -v --no-input --output-dir "$(Agent.BuildDirectory)" .

    - name: Check files
      run: |
        python tests/test_template_evaluation.py ./out/ndx-my-namespace/ ndx-my-namespace
        # python tests/test_template_evaluation.py "$(Agent.BuildDirectory)/ndx-my-namespace/" "ndx-my-namespace"

    - name: Run PyNWB tests from generated extension
      run: |
        cd ./out/ndx-my-namespace
        # cd "$(Agent.BuildDirectory)/ndx-my-namespace"
        python -m pip install -r requirements-dev.txt
        python -m pip install .
        pytest

    - name: Build documentation from generated extension
      run: |
        set -e
        cd ./out/ndx-my-namespace/docs
        # cd "$(Agent.BuildDirectory)/ndx-my-namespace/docs"
        make apidoc
        make html
